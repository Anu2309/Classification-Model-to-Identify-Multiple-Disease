# -*- coding: utf-8 -*-
"""Classification Model to Identify Multiple Disease Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lIwsy023bvzACOk7s0wntjzIrS4lr8JQ

# **‚≠ê Classification Model to Identify Multiple Disease**
"""

# import library
import pandas as pd
import numpy as np
import os
import seaborn as sbn
import matplotlib.pyplot as plt

# import data
disease = pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/MultipleDiseasePrediction.csv')

# view data
disease.head()

# info of data
disease.info()

# summary statistics
disease.describe()

# check for missing value
disease.isnull()

# check for categories
disease.nunique()

# correlation
disease.corr()

# column names
disease.columns

# define y
Y = disease['prognosis']

# define X
X = disease[['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity', 'ulcers_on_tongue', 'muscle_wasting', 'vomiting', 'burning_micturition', 'spotting_ urination', 'fatigue', 'weight_gain', 'anxiety', 'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy', 'patches_in_throat', 'irregular_sugar_level', 'cough', 'high_fever', 'sunken_eyes', 'breathlessness', 'sweating', 'dehydration', 'indigestion', 'headache', 'yellowish_skin', 'dark_urine', 'nausea', 'loss_of_appetite', 'pain_behind_the_eyes', 'back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload.1', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']]

# split data
from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split (X,y,test_size = 0.2 ,  random_state=2520)

# verify shape
X_train.shape, X_test.shape, y_train.shape, y_test.shape

# select model
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators = 100)

# train model
model.fit(X_train,y_train)

# predict with model
y_pred = model.predict(X_test)
y_pred

# model evaluation
from sklearn.metrics import mean_absolute_percentage_error

# model accuracy
from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
accuracy_score(y_test , y_pred)

# model confusion matrix
confusion_matrix(y_test,y_pred)

# model classification report
print(classification_report(y_test , y_pred))

# future prediction
X_new = X.sample()

# define X_new
X_new

# predict for X_new
model.predict(X_new)